"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.every = exports.schema = exports.literal = exports.kind = exports.has = exports.isObject = exports.isArray = exports.isInstance = exports.isFunction = exports.isNil = exports.isNull = exports.isUndefined = exports.isSymbol = exports.isBoolean = exports.isBigInt = exports.isNumber = exports.isString = void 0;
function isString(value) {
    return typeof value === 'string';
}
exports.isString = isString;
function isNumber(value) {
    return typeof value === 'number';
}
exports.isNumber = isNumber;
function isBigInt(value) {
    return typeof value === 'bigint';
}
exports.isBigInt = isBigInt;
function isBoolean(value) {
    return typeof value === 'boolean';
}
exports.isBoolean = isBoolean;
function isSymbol(value) {
    return typeof value === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(value) {
    return value === undefined;
}
exports.isUndefined = isUndefined;
function isNull(value) {
    return value === null;
}
exports.isNull = isNull;
function isNil(value) {
    return value == null;
}
exports.isNil = isNil;
function isFunction(value) {
    return typeof value === 'function';
}
exports.isFunction = isFunction;
function isInstance(value, C) {
    return value instanceof C;
}
exports.isInstance = isInstance;
/**
 *  This will not check element types.
 */
function isArray(value) {
    return Array.isArray(value);
}
exports.isArray = isArray;
// https://www.npmjs.com/package/isobject
function isObject(value) {
    return (value != null && typeof value === 'object' && Array.isArray(value) === false);
}
exports.isObject = isObject;
function has(...args) {
    return function (value) {
        return args.every((k) => !isNil(value[k]));
    };
}
exports.has = has;
// Discriminated unions
// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions
function kind(uid, uniProp = 'kind') {
    return function (value) {
        return isString(value[uniProp]) && value[uniProp] === uid;
    };
}
exports.kind = kind;
function literal(literal) {
    return function (value) {
        return value === literal;
    };
}
exports.literal = literal;
function schema(schema) {
    return function (value) {
        if (isObject(value)) {
            for (let k in schema) {
                if (!value.hasOwnProperty(k))
                    return false;
                if (!schema[k](value[k]))
                    return false;
            }
            return true;
        }
        return false;
    };
}
exports.schema = schema;
function every(predicate) {
    return function (value) {
        if (Array.isArray(value)) {
            return value.every(predicate);
        }
        return false;
    };
}
exports.every = every;
