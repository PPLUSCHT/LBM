export declare function isString(value: unknown): value is string;
export declare function isNumber(value: unknown): value is number;
export declare function isBigInt(value: unknown): value is bigint;
export declare function isBoolean(value: unknown): value is boolean;
export declare function isSymbol(value: unknown): value is symbol;
export declare function isUndefined(value: unknown): value is undefined;
export declare function isNull(value: unknown): value is null;
export declare function isNil(value: unknown): value is null | undefined;
export declare function isFunction<T>(value: unknown): value is T;
export declare type ClassType<T, ARGS extends any[] = any[]> = new (...args: ARGS) => T;
export declare function isInstance<T>(value: unknown, C: ClassType<T>): value is T;
/**
 *  This will not check element types.
 */
export declare function isArray<ItemType>(value: unknown): value is Array<ItemType>;
export declare function isObject(value: unknown): value is {
    [key: string]: unknown;
};
declare type Predicate<T> = (value: unknown) => value is T;
export declare function has<T>(...args: Array<keyof T>): Predicate<T>;
export declare function kind<T>(uid: string, uniProp?: string): Predicate<T>;
export declare function literal<T extends boolean | number | string | symbol>(literal: T): Predicate<T>;
declare type SchemaType<T = {}> = {
    [K in keyof T]: Predicate<T[K]>;
};
export declare function schema<T>(schema: SchemaType<T>): Predicate<T>;
export declare function every<T>(predicate: Predicate<T>): Predicate<T[]>;
export {};
