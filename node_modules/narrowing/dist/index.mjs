// src/index.ts
function isString(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number";
}
function isBigInt(value) {
  return typeof value === "bigint";
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isSymbol(value) {
  return typeof value === "symbol";
}
function isUndefined(value) {
  return value === void 0;
}
function isNull(value) {
  return value === null;
}
function isNil(value) {
  return value == null;
}
function isFunction(value) {
  return typeof value === "function";
}
function isInstance(value, C) {
  return value instanceof C;
}
function isArray(value) {
  return Array.isArray(value);
}
function isObject(value) {
  return value != null && typeof value === "object" && Array.isArray(value) === false;
}
function has(...args) {
  return function(value) {
    return args.every((k) => !isNil(value[k]));
  };
}
function kind(uid, uniProp = "kind") {
  return function(value) {
    return isString(value[uniProp]) && value[uniProp] === uid;
  };
}
function literal(literal2) {
  return function(value) {
    return value === literal2;
  };
}
function schema(schema2) {
  return function(value) {
    if (isObject(value)) {
      for (let k in schema2) {
        if (!value[k])
          return false;
        if (!schema2[k](value[k]))
          return false;
      }
      return true;
    }
    return false;
  };
}
export {
  has,
  isArray,
  isBigInt,
  isBoolean,
  isFunction,
  isInstance,
  isNil,
  isNull,
  isNumber,
  isObject,
  isString,
  isSymbol,
  isUndefined,
  kind,
  literal,
  schema
};
