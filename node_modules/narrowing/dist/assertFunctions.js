import { isArray, isBigInt, isBoolean, isFunction, isInstance, isNil, isNull, isNumber, isObject, isString, isSymbol, isUndefined } from './isFunctions';
export function asString(value) {
    if (!isString(value))
        throw new Error(`asString() failed, ${value} is not string`);
}
export function asNumber(value) {
    if (!isNumber(value))
        throw new Error(`asNumber() failed, ${value} is not number`);
}
export function asBigInt(value) {
    if (!isBigInt(value))
        throw new Error(`asBitInt() failed, ${value} is not bigint`);
}
export function asBoolean(value) {
    if (!isBoolean(value))
        throw new Error(`asBoolean() failed, ${value} is not boolean`);
}
export function asSymbol(value) {
    if (!isSymbol(value))
        throw new Error(`asSymbol() failed, ${value} is not symbol`);
}
export function asUndefined(value) {
    if (!isUndefined(value))
        throw new Error(`asUndefined() failed, ${value} is not undefined`);
}
export function asNull(value) {
    if (!isNull(value))
        throw new Error(`asNull() failed, ${value} is not null`);
}
export function asNil(value) {
    if (!isNil(value))
        throw new Error(`asNil() failed, ${value} is not null or undefined`);
}
export function asDefined(value) {
    if (isNil(value))
        throw new Error(`asDefined() failed, ${value} is null or undefined`);
}
export function asFunction(value) {
    if (!isFunction(value))
        throw new Error(`asFunction() failed, ${value} is not Function`);
}
export function asInstance(value, C) {
    if (!isInstance(value, C))
        throw new Error(`asInstance() failed, ${value} is not instance of ${typeof C}`);
}
/**
 *  This method will not check element types.
 */
export function asArray(value) {
    if (!isArray(value))
        throw new Error(`asArray() failed, ${value} is not Array`);
}
export function asObject(value) {
    if (!isObject(value))
        throw new Error(`asObject() faied, ${value} is not object`);
}
