export function isString(value) {
    return typeof value === 'string';
}
export function isNumber(value) {
    return typeof value === 'number';
}
export function isBigInt(value) {
    return typeof value === 'bigint';
}
export function isBoolean(value) {
    return typeof value === 'boolean';
}
export function isSymbol(value) {
    return typeof value === 'symbol';
}
export function isUndefined(value) {
    return value === undefined;
}
export function isNull(value) {
    return value === null;
}
export function isNil(value) {
    return value == null;
}
export function isFunction(value) {
    return typeof value === 'function';
}
export function isInstance(value, C) {
    return value instanceof C;
}
/**
 *  This will not check element types.
 */
export function isArray(value) {
    return Array.isArray(value);
}
// https://www.npmjs.com/package/isobject
export function isObject(value) {
    return (value != null && typeof value === 'object' && Array.isArray(value) === false);
}
export function has(...args) {
    return function (value) {
        return args.every((k) => !isNil(value[k]));
    };
}
// Discriminated unions
// https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions
export function kind(uid, uniProp = 'kind') {
    return function (value) {
        return (isString(value[uniProp]) &&
            value[uniProp] === uid);
    };
}
export function literal(literal) {
    return function (value) {
        return value === literal;
    };
}
export function schema(schema) {
    return function (value) {
        if (isObject(value)) {
            for (const k in schema) {
                if (!value[k])
                    return false;
                if (!schema[k](value[k]))
                    return false;
            }
            return true;
        }
        return false;
    };
}
